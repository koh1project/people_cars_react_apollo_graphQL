/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

const documents = {
    "\n  query GetPeople {\n    people {\n      id\n      firstName\n      lastName\n      cars {\n        id\n        year\n        make\n        model\n        price\n        personId\n      }\n    }\n  }\n": types.GetPeopleDocument,
    "\n  query GetCars {\n    cars {\n      id\n      year\n      make\n      model\n      price\n      personId\n    }\n  }\n": types.GetCarsDocument,
    "\n  query PersonWithCars($id: String!) {\n    personWithCars(id: $id) {\n      id\n      firstName\n      lastName\n      cars {\n        id\n        year\n        make\n        model\n        price\n        personId\n      }\n    }\n  }\n": types.PersonWithCarsDocument,
    "\n  mutation CreatePerson($id: String!, $firstName: String!, $lastName: String!) {\n    createPerson(id: $id, firstName: $firstName, lastName: $lastName) {\n      id\n      firstName\n      lastName\n      cars {\n        id\n        year\n        make\n        model\n        price\n        personId\n      }\n    }\n  }\n": types.CreatePersonDocument,
    "\n  mutation CreateCar(\n    $id: String!\n    $year: Int!\n    $make: String!\n    $model: String!\n    $price: Float!\n    $personId: String!\n  ) {\n    createCar(\n      id: $id\n      year: $year\n      make: $make\n      model: $model\n      price: $price\n      personId: $personId\n    ) {\n      id\n      year\n      make\n      model\n      price\n      personId\n    }\n  }\n": types.CreateCarDocument,
    "\n  mutation UpdatePerson($id: String!, $firstName: String!, $lastName: String!) {\n    updatePerson(id: $id, firstName: $firstName, lastName: $lastName) {\n      id\n      firstName\n      lastName\n    }\n  }\n": types.UpdatePersonDocument,
    "\n  mutation UpdateCar(\n    $id: String!\n    $year: Int!\n    $make: String!\n    $model: String!\n    $price: Float!\n    $personId: String!\n  ) {\n    updateCar(\n      id: $id\n      year: $year\n      make: $make\n      model: $model\n      price: $price\n      personId: $personId\n    ) {\n      id\n      year\n      make\n      model\n      price\n      personId\n    }\n  }\n": types.UpdateCarDocument,
    "\n  mutation DeletePerson($id: String!) {\n    deletePerson(id: $id) {\n      id\n      firstName\n      lastName\n    }\n  }\n": types.DeletePersonDocument,
    "\n  mutation DeleteCar($id: String!) {\n    deleteCar(id: $id) {\n      id\n      year\n      make\n      model\n      price\n      personId\n    }\n  }\n": types.DeleteCarDocument,
};

export function graphql(source: "\n  query GetPeople {\n    people {\n      id\n      firstName\n      lastName\n      cars {\n        id\n        year\n        make\n        model\n        price\n        personId\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetPeople {\n    people {\n      id\n      firstName\n      lastName\n      cars {\n        id\n        year\n        make\n        model\n        price\n        personId\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query GetCars {\n    cars {\n      id\n      year\n      make\n      model\n      price\n      personId\n    }\n  }\n"): (typeof documents)["\n  query GetCars {\n    cars {\n      id\n      year\n      make\n      model\n      price\n      personId\n    }\n  }\n"];
export function graphql(source: "\n  query PersonWithCars($id: String!) {\n    personWithCars(id: $id) {\n      id\n      firstName\n      lastName\n      cars {\n        id\n        year\n        make\n        model\n        price\n        personId\n      }\n    }\n  }\n"): (typeof documents)["\n  query PersonWithCars($id: String!) {\n    personWithCars(id: $id) {\n      id\n      firstName\n      lastName\n      cars {\n        id\n        year\n        make\n        model\n        price\n        personId\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation CreatePerson($id: String!, $firstName: String!, $lastName: String!) {\n    createPerson(id: $id, firstName: $firstName, lastName: $lastName) {\n      id\n      firstName\n      lastName\n      cars {\n        id\n        year\n        make\n        model\n        price\n        personId\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreatePerson($id: String!, $firstName: String!, $lastName: String!) {\n    createPerson(id: $id, firstName: $firstName, lastName: $lastName) {\n      id\n      firstName\n      lastName\n      cars {\n        id\n        year\n        make\n        model\n        price\n        personId\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation CreateCar(\n    $id: String!\n    $year: Int!\n    $make: String!\n    $model: String!\n    $price: Float!\n    $personId: String!\n  ) {\n    createCar(\n      id: $id\n      year: $year\n      make: $make\n      model: $model\n      price: $price\n      personId: $personId\n    ) {\n      id\n      year\n      make\n      model\n      price\n      personId\n    }\n  }\n"): (typeof documents)["\n  mutation CreateCar(\n    $id: String!\n    $year: Int!\n    $make: String!\n    $model: String!\n    $price: Float!\n    $personId: String!\n  ) {\n    createCar(\n      id: $id\n      year: $year\n      make: $make\n      model: $model\n      price: $price\n      personId: $personId\n    ) {\n      id\n      year\n      make\n      model\n      price\n      personId\n    }\n  }\n"];
export function graphql(source: "\n  mutation UpdatePerson($id: String!, $firstName: String!, $lastName: String!) {\n    updatePerson(id: $id, firstName: $firstName, lastName: $lastName) {\n      id\n      firstName\n      lastName\n    }\n  }\n"): (typeof documents)["\n  mutation UpdatePerson($id: String!, $firstName: String!, $lastName: String!) {\n    updatePerson(id: $id, firstName: $firstName, lastName: $lastName) {\n      id\n      firstName\n      lastName\n    }\n  }\n"];
export function graphql(source: "\n  mutation UpdateCar(\n    $id: String!\n    $year: Int!\n    $make: String!\n    $model: String!\n    $price: Float!\n    $personId: String!\n  ) {\n    updateCar(\n      id: $id\n      year: $year\n      make: $make\n      model: $model\n      price: $price\n      personId: $personId\n    ) {\n      id\n      year\n      make\n      model\n      price\n      personId\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCar(\n    $id: String!\n    $year: Int!\n    $make: String!\n    $model: String!\n    $price: Float!\n    $personId: String!\n  ) {\n    updateCar(\n      id: $id\n      year: $year\n      make: $make\n      model: $model\n      price: $price\n      personId: $personId\n    ) {\n      id\n      year\n      make\n      model\n      price\n      personId\n    }\n  }\n"];
export function graphql(source: "\n  mutation DeletePerson($id: String!) {\n    deletePerson(id: $id) {\n      id\n      firstName\n      lastName\n    }\n  }\n"): (typeof documents)["\n  mutation DeletePerson($id: String!) {\n    deletePerson(id: $id) {\n      id\n      firstName\n      lastName\n    }\n  }\n"];
export function graphql(source: "\n  mutation DeleteCar($id: String!) {\n    deleteCar(id: $id) {\n      id\n      year\n      make\n      model\n      price\n      personId\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteCar($id: String!) {\n    deleteCar(id: $id) {\n      id\n      year\n      make\n      model\n      price\n      personId\n    }\n  }\n"];

export function graphql(source: string): unknown;
export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;